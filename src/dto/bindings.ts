// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getTournaments() : Promise<Tournament[]> {
    return await TAURI_INVOKE("plugin:pawn|get_tournaments");
},
async getTournament(id: number) : Promise<Tournament> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament", { id });
},
async createTournament(data: CreateTournament) : Promise<Tournament> {
    return await TAURI_INVOKE("plugin:pawn|create_tournament", { data });
},
async getTournamentDetails(id: number) : Promise<TournamentDetails> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_details", { id });
},
async deleteTournament(id: number) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|delete_tournament", { id });
},
async getPlayersByTournament(tournamentId: number) : Promise<Player[]> {
    return await TAURI_INVOKE("plugin:pawn|get_players_by_tournament", { tournamentId });
},
async createPlayer(data: CreatePlayer) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|create_player", { data });
},
async getGamesByTournament(tournamentId: number) : Promise<Game[]> {
    return await TAURI_INVOKE("plugin:pawn|get_games_by_tournament", { tournamentId });
},
async createGame(data: CreateGame) : Promise<Game> {
    return await TAURI_INVOKE("plugin:pawn|create_game", { data });
},
async getPlayerResults(tournamentId: number) : Promise<PlayerResult[]> {
    return await TAURI_INVOKE("plugin:pawn|get_player_results", { tournamentId });
},
async getGameResults(tournamentId: number) : Promise<GameResult[]> {
    return await TAURI_INVOKE("plugin:pawn|get_game_results", { tournamentId });
},
async populateMockData(tournamentId: number) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|populate_mock_data", { tournamentId });
},
async populateMockTournaments() : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|populate_mock_tournaments");
},
async getTournamentStandings(tournamentId: number) : Promise<StandingsCalculationResult> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_standings", { tournamentId });
},
async getTournamentSettings(tournamentId: number) : Promise<TournamentTiebreakConfig> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_settings", { tournamentId });
},
async updateTournamentSettings(settings: UpdateTournamentSettings) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|update_tournament_settings", { settings });
},
async getRoundsByTournament(tournamentId: number) : Promise<Round[]> {
    return await TAURI_INVOKE("plugin:pawn|get_rounds_by_tournament", { tournamentId });
},
async getCurrentRound(tournamentId: number) : Promise<Round | null> {
    return await TAURI_INVOKE("plugin:pawn|get_current_round", { tournamentId });
},
async createRound(data: CreateRound) : Promise<Round> {
    return await TAURI_INVOKE("plugin:pawn|create_round", { data });
},
async updateRoundStatus(data: UpdateRoundStatus) : Promise<Round> {
    return await TAURI_INVOKE("plugin:pawn|update_round_status", { data });
},
async getRoundDetails(roundId: number) : Promise<RoundDetails> {
    return await TAURI_INVOKE("plugin:pawn|get_round_details", { roundId });
},
async generatePairings(request: GeneratePairingsRequest) : Promise<Pairing[]> {
    return await TAURI_INVOKE("plugin:pawn|generate_pairings", { request });
},
async createPairingsAsGames(tournamentId: number, roundNumber: number, pairings: Pairing[]) : Promise<GameResult[]> {
    return await TAURI_INVOKE("plugin:pawn|create_pairings_as_games", { tournamentId, roundNumber, pairings });
},
async completeRound(roundId: number) : Promise<Round> {
    return await TAURI_INVOKE("plugin:pawn|complete_round", { roundId });
},
async createNextRound(tournamentId: number) : Promise<Round> {
    return await TAURI_INVOKE("plugin:pawn|create_next_round", { tournamentId });
},
async updateTournamentPairingMethod(data: UpdateTournamentPairingMethod) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|update_tournament_pairing_method", { data });
},
async updateGameResult(data: UpdateGameResult) : Promise<Game> {
    return await TAURI_INVOKE("plugin:pawn|update_game_result", { data });
},
async validateGameResult(data: ValidateGameResult) : Promise<GameResultValidation> {
    return await TAURI_INVOKE("plugin:pawn|validate_game_result", { data });
},
async batchUpdateResults(data: BatchUpdateResults) : Promise<BatchValidationResult> {
    return await TAURI_INVOKE("plugin:pawn|batch_update_results", { data });
},
async getEnhancedGameResult(gameId: number) : Promise<EnhancedGameResult> {
    return await TAURI_INVOKE("plugin:pawn|get_enhanced_game_result", { gameId });
},
async getGameAuditTrail(gameId: number) : Promise<GameResultAudit[]> {
    return await TAURI_INVOKE("plugin:pawn|get_game_audit_trail", { gameId });
},
async approveGameResult(data: ApproveGameResult) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|approve_game_result", { data });
},
async getPendingApprovals(tournamentId: number) : Promise<EnhancedGameResult[]> {
    return await TAURI_INVOKE("plugin:pawn|get_pending_approvals", { tournamentId });
},
async getGameResultTypes() : Promise<([string, string])[]> {
    return await TAURI_INVOKE("plugin:pawn|get_game_result_types");
},
async createPlayerEnhanced(data: CreatePlayer) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|create_player_enhanced", { data });
},
async updatePlayer(data: UpdatePlayer) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|update_player", { data });
},
async deletePlayer(playerId: number) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|delete_player", { playerId });
},
async getPlayerById(playerId: number) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|get_player_by_id", { playerId });
},
async getPlayersByTournamentEnhanced(tournamentId: number) : Promise<Player[]> {
    return await TAURI_INVOKE("plugin:pawn|get_players_by_tournament_enhanced", { tournamentId });
},
async searchPlayers(filters: PlayerSearchFilters) : Promise<Player[]> {
    return await TAURI_INVOKE("plugin:pawn|search_players", { filters });
},
async bulkImportPlayers(request: BulkImportRequest) : Promise<BulkImportResult> {
    return await TAURI_INVOKE("plugin:pawn|bulk_import_players", { request });
},
async validateBulkImport(request: BulkImportRequest) : Promise<BulkImportResult> {
    return await TAURI_INVOKE("plugin:pawn|validate_bulk_import", { request });
},
async addPlayerRatingHistory(data: CreateRatingHistory) : Promise<RatingHistory> {
    return await TAURI_INVOKE("plugin:pawn|add_player_rating_history", { data });
},
async getPlayerRatingHistory(playerId: number) : Promise<RatingHistory[]> {
    return await TAURI_INVOKE("plugin:pawn|get_player_rating_history", { playerId });
},
async createPlayerCategory(data: CreatePlayerCategory) : Promise<PlayerCategory> {
    return await TAURI_INVOKE("plugin:pawn|create_player_category", { data });
},
async getTournamentCategories(tournamentId: number) : Promise<PlayerCategory[]> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_categories", { tournamentId });
},
async deletePlayerCategory(categoryId: number) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|delete_player_category", { categoryId });
},
async assignPlayerToCategory(data: AssignPlayerToCategory) : Promise<PlayerCategoryAssignment> {
    return await TAURI_INVOKE("plugin:pawn|assign_player_to_category", { data });
},
async updatePlayerStatus(playerId: number, status: string) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|update_player_status", { playerId, status });
},
async withdrawPlayer(playerId: number) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|withdraw_player", { playerId });
},
async requestPlayerBye(playerId: number) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|request_player_bye", { playerId });
},
async getPlayerStatistics(tournamentId: number) : Promise<PlayerStatistics> {
    return await TAURI_INVOKE("plugin:pawn|get_player_statistics", { tournamentId });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type ApproveGameResult = { game_id: number; approved_by: string; notes: string | null }
export type AssignPlayerToCategory = { player_id: number; category_id: number }
export type BatchUpdateResults = { tournament_id: number; updates: UpdateGameResult[]; validate_only: boolean }
export type BatchValidationResult = { overall_valid: boolean; results: ([number, GameResultValidation])[] }
export type BulkImportPlayer = { name: string; rating: number | null; country_code: string | null; title: string | null; birth_date: string | null; gender: string | null; email: string | null; phone: string | null; club: string | null }
export type BulkImportRequest = { tournament_id: number; players: BulkImportPlayer[]; validate_only: boolean }
export type BulkImportResult = { success_count: number; error_count: number; validations: PlayerImportValidation[]; imported_player_ids: number[] }
export type CreateGame = { tournament_id: number; round_number: number; white_player_id: number; black_player_id: number; result: string }
export type CreatePlayer = { tournament_id: number; name: string; rating: number | null; country_code: string | null; title: string | null; birth_date: string | null; gender: string | null; email: string | null; phone: string | null; club: string | null }
export type CreatePlayerCategory = { tournament_id: number; name: string; description: string | null; min_rating: number | null; max_rating: number | null; min_age: number | null; max_age: number | null; gender_restriction: string | null }
export type CreateRatingHistory = { player_id: number; rating_type: string; rating: number; is_provisional: boolean; effective_date: string }
export type CreateRound = { tournament_id: number; round_number: number }
export type CreateTournament = { name: string; location: string; date: string; time_type: string; player_count: number; rounds_played: number; total_rounds: number; country_code: string }
export type EnhancedGameResult = { game: Game; white_player: Player; black_player: Player; audit_trail: GameResultAudit[]; requires_approval: boolean }
export type Game = { id: number; tournament_id: number; round_number: number; white_player_id: number; black_player_id: number; result: string; result_type: string | null; result_reason: string | null; arbiter_notes: string | null; last_updated: string | null; approved_by: string | null; created_at: string }
export type GameResult = { game: Game; white_player: Player; black_player: Player }
export type GameResultAudit = { id: number; game_id: number; old_result: string | null; new_result: string; old_result_type: string | null; new_result_type: string | null; reason: string | null; changed_by: string | null; changed_at: string; approved: boolean; approved_by: string | null; approved_at: string | null }
export type GameResultValidation = { is_valid: boolean; errors: string[]; warnings: string[] }
export type GeneratePairingsRequest = { tournament_id: number; round_number: number; pairing_method: string }
export type Pairing = { white_player: Player; black_player: Player | null; board_number: number }
export type Player = { id: number; tournament_id: number; name: string; rating: number | null; country_code: string | null; title: string | null; birth_date: string | null; gender: string | null; email: string | null; phone: string | null; club: string | null; status: string; created_at: string; updated_at: string | null }
export type PlayerCategory = { id: number; tournament_id: number; name: string; description: string | null; min_rating: number | null; max_rating: number | null; min_age: number | null; max_age: number | null; gender_restriction: string | null; created_at: string }
export type PlayerCategoryAssignment = { id: number; player_id: number; category_id: number; assigned_at: string }
export type PlayerImportValidation = { is_valid: boolean; errors: string[]; warnings: string[]; player_data: BulkImportPlayer }
export type PlayerResult = { player: Player; points: number; games_played: number; wins: number; draws: number; losses: number }
export type PlayerSearchFilters = { tournament_id: number | null; name: string | null; rating_min: number | null; rating_max: number | null; country_code: string | null; title: string | null; gender: string | null; status: string | null; category_id: number | null; limit: number | null; offset: number | null }
export type PlayerStanding = { player: Player; rank: number; points: number; games_played: number; wins: number; draws: number; losses: number; tiebreak_scores: TiebreakScore[]; performance_rating: number | null; rating_change: number | null }
export type PlayerStatistics = { total_players: number; active_players: number; withdrawn_players: number; late_entries: number; bye_requests: number; average_rating: number; titled_players: number }
export type RatingHistory = { id: number; player_id: number; rating_type: string; rating: number; is_provisional: boolean; effective_date: string; created_at: string }
export type Round = { id: number; tournament_id: number; round_number: number; status: string; created_at: string; completed_at: string | null }
export type RoundDetails = { round: Round; games: GameResult[]; status: RoundStatus }
export type RoundStatus = "Upcoming" | "InProgress" | "Completed"
export type StandingsCalculationResult = { standings: PlayerStanding[]; last_updated: string; tiebreak_config: TournamentTiebreakConfig }
export type TiebreakScore = { tiebreak_type: TiebreakType; value: number; display_value: string }
export type TiebreakType = "buchholz_full" | "buchholz_cut_1" | "buchholz_cut_2" | "buchholz_median" | "sonneborn_berger" | "progressive_score" | "cumulative_score" | "direct_encounter" | "average_rating_of_opponents" | "tournament_performance_rating" | "number_of_wins" | "number_of_games_with_black" | "number_of_wins_with_black" | "koya_system" | "aroc_cut_1" | "aroc_cut_2" | "match_points" | "game_points" | "board_points"
export type Tournament = { id: number; name: string; location: string; date: string; time_type: string; player_count: number; rounds_played: number; total_rounds: number; country_code: string }
export type TournamentDetails = { tournament: Tournament; players: PlayerResult[]; games: GameResult[] }
export type TournamentTiebreakConfig = { tournament_id: number; tiebreaks: TiebreakType[]; use_fide_defaults: boolean }
/**
 * Global error object returned by all commands
 */
export type TxError = { 
/**
 * short message to be displayed in the toast
 */
message: string; 
/**
 * Detailed error message throwing by the low level api
 */
details: string }
export type UpdateGameResult = { game_id: number; result: string; result_type: string | null; result_reason: string | null; arbiter_notes: string | null; changed_by: string | null }
export type UpdatePlayer = { player_id: number; name: string | null; rating: number | null; country_code: string | null; title: string | null; birth_date: string | null; gender: string | null; email: string | null; phone: string | null; club: string | null; status: string | null }
export type UpdateRoundStatus = { round_id: number; status: string }
export type UpdateTournamentPairingMethod = { tournament_id: number; pairing_method: string }
export type UpdateTournamentSettings = { tournament_id: number; tiebreak_order: TiebreakType[]; use_fide_defaults: boolean }
export type ValidateGameResult = { game_id: number; result: string; result_type: string | null; tournament_id: number; changed_by: string | null }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
