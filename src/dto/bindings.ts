// @ts-nocheck
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getTournaments() : Promise<Tournament[]> {
    return await TAURI_INVOKE("plugin:pawn|get_tournaments");
},
async getTournament(id: number) : Promise<Tournament> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament", { id });
},
async createTournament(data: CreateTournament) : Promise<Tournament> {
    return await TAURI_INVOKE("plugin:pawn|create_tournament", { data });
},
async getTournamentDetails(id: number) : Promise<TournamentDetails> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_details", { id });
},
async getPlayersByTournament(tournamentId: number) : Promise<Player[]> {
    return await TAURI_INVOKE("plugin:pawn|get_players_by_tournament", { tournamentId });
},
async createPlayer(data: CreatePlayer) : Promise<Player> {
    return await TAURI_INVOKE("plugin:pawn|create_player", { data });
},
async getGamesByTournament(tournamentId: number) : Promise<Game[]> {
    return await TAURI_INVOKE("plugin:pawn|get_games_by_tournament", { tournamentId });
},
async createGame(data: CreateGame) : Promise<Game> {
    return await TAURI_INVOKE("plugin:pawn|create_game", { data });
},
async getPlayerResults(tournamentId: number) : Promise<PlayerResult[]> {
    return await TAURI_INVOKE("plugin:pawn|get_player_results", { tournamentId });
},
async getGameResults(tournamentId: number) : Promise<GameResult[]> {
    return await TAURI_INVOKE("plugin:pawn|get_game_results", { tournamentId });
},
async populateMockData(tournamentId: number) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|populate_mock_data", { tournamentId });
},
async getTournamentStandings(tournamentId: number) : Promise<StandingsCalculationResult> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_standings", { tournamentId });
},
async getTournamentSettings(tournamentId: number) : Promise<TournamentTiebreakConfig> {
    return await TAURI_INVOKE("plugin:pawn|get_tournament_settings", { tournamentId });
},
async updateTournamentSettings(settings: UpdateTournamentSettings) : Promise<null> {
    return await TAURI_INVOKE("plugin:pawn|update_tournament_settings", { settings });
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type CreateGame = { tournament_id: number; round_number: number; white_player_id: number; black_player_id: number; result: string }
export type CreatePlayer = { tournament_id: number; name: string; rating: number | null; country_code: string | null }
export type CreateTournament = { name: string; location: string; date: string; time_type: string; player_count: number; rounds_played: number; total_rounds: number; country_code: string }
export type Game = { id: number; tournament_id: number; round_number: number; white_player_id: number; black_player_id: number; result: string; created_at: string }
export type GameResult = { game: Game; white_player: Player; black_player: Player }
export type Player = { id: number; tournament_id: number; name: string; rating: number | null; country_code: string | null; created_at: string }
export type PlayerResult = { player: Player; points: number; games_played: number; wins: number; draws: number; losses: number }
export type PlayerStanding = { player: Player; rank: number; points: number; games_played: number; wins: number; draws: number; losses: number; tiebreak_scores: TiebreakScore[]; performance_rating: number | null; rating_change: number | null }
export type StandingsCalculationResult = { standings: PlayerStanding[]; last_updated: string; tiebreak_config: TournamentTiebreakConfig }
export type TiebreakScore = { tiebreak_type: TiebreakType; value: number; display_value: string }
export type TiebreakType = "buchholz_full" | "buchholz_cut_1" | "buchholz_cut_2" | "buchholz_median" | "sonneborn_berger" | "progressive_score" | "cumulative_score" | "direct_encounter" | "average_rating_of_opponents" | "tournament_performance_rating" | "number_of_wins" | "number_of_games_with_black" | "number_of_wins_with_black" | "koya_system" | "aroc_cut_1" | "aroc_cut_2" | "match_points" | "game_points" | "board_points"
export type Tournament = { id: number; name: string; location: string; date: string; time_type: string; player_count: number; rounds_played: number; total_rounds: number; country_code: string }
export type TournamentDetails = { tournament: Tournament; players: PlayerResult[]; games: GameResult[] }
export type TournamentTiebreakConfig = { tournament_id: number; tiebreaks: TiebreakType[]; use_fide_defaults: boolean }
/**
 * Global error object returned by all commands
 */
export type TxError = { 
/**
 * short message to be displayed in the toast
 */
message: string; 
/**
 * Detailed error message throwing by the low level api
 */
details: string }
export type UpdateTournamentSettings = { tournament_id: number; tiebreak_order: TiebreakType[]; use_fide_defaults: boolean }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
