#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

echo "🚀 Running pre-commit quality gates..."

# 🎨 Code Formatting
echo "🎨 Formatting code..."

# Check if any files need formatting
if ! npm run format:all:check; then
    echo "  ⚠️  Code needs formatting, applying fixes..."
    npm run format:all
    echo "  ✅ Code formatted successfully"
    
    # Re-add formatted files to staging area
    git add .
else
    echo "  ✅ All code is properly formatted"
fi

# Run standard pre-commit checks (linting, type checking)
echo "🔍 Running linting and type checks..."
npm run pre-commit

# TDD workflow enforcement
echo "🔍 Checking TDD compliance..."

# Check if TDD check should be skipped
if [ "$SKIP_TDD_CHECK" = "1" ]; then
    echo "⚠️  TDD check skipped (SKIP_TDD_CHECK=1)"
    echo "   Please add unit tests in follow-up commits"
else
    # Check if any service files were modified
    MODIFIED_SERVICE_FILES=$(git diff --cached --name-only | grep "src-tauri/src/pawn/service/.*\.rs" | grep -v "mod.rs" | grep -v "tests/" || true)

    if [ -n "$MODIFIED_SERVICE_FILES" ]; then
        echo "📝 Modified service files detected:"
        echo "$MODIFIED_SERVICE_FILES"
        
        # Check that modified service files have tests
        for file in $MODIFIED_SERVICE_FILES; do
            if ! grep -q "#\[cfg(test)\]" "$file"; then
                echo "❌ TDD violation: $file has no tests"
                echo "   Please add unit tests before committing"
                echo "   TDD workflow: Red → Green → Refactor"
                exit 1
            else
                echo "✅ $file has tests"
            fi
        done
    fi
fi

# Check if any new commands were added
NEW_COMMANDS=$(git diff --cached --name-only | grep "src-tauri/src/pawn/command/.*\.rs" | grep -v "mod.rs" || true)

if [ -n "$NEW_COMMANDS" ]; then
    echo "📡 Command files detected:"
    echo "$NEW_COMMANDS"
    
    # Check that permissions directory exists and has relevant permission files
    if [ ! -d "src-tauri/permissions/pawn" ]; then
        echo "❌ No permissions directory found: src-tauri/permissions/pawn"
        echo "   Please create permission files before committing"
        echo "   See CLAUDE.md for permission configuration"
        exit 1
    fi
    
    # Count permission files - if we have modified commands, we should have permissions
    PERMISSION_COUNT=$(find src-tauri/permissions/pawn -name "*.toml" -type f | wc -l)
    
    if [ "$PERMISSION_COUNT" -lt 10 ]; then
        echo "❌ Too few permission files found ($PERMISSION_COUNT)"
        echo "   Please ensure all commands have proper permissions"
        echo "   See CLAUDE.md for permission configuration"
        exit 1
    else
        echo "✅ Permission files found ($PERMISSION_COUNT permissions)"
    fi
fi

# Check that integration tests exist for new database operations
DB_CHANGES=$(git diff --cached --name-only | grep "src-tauri/src/pawn/db/.*\.rs" || true)

if [ -n "$DB_CHANGES" ]; then
    echo "🗄️ Database changes detected:"
    echo "$DB_CHANGES"
    
    # Check that integration tests exist (either in tests/ directory or tests/integration/)
    if [ -d "src-tauri/tests" ] && [ -n "$(find src-tauri/tests -name '*.rs' -type f 2>/dev/null)" ]; then
        echo "✅ Integration tests found"
    else
        echo "❌ No integration tests found"
        echo "   Please add integration tests for database changes"
        exit 1
    fi
fi

# Check test coverage (if tarpaulin is available)
if command -v cargo-tarpaulin >/dev/null 2>&1; then
    echo "📊 Checking test coverage..."
    
    cd src-tauri
    
    # Run coverage check with timeout
    timeout 60s cargo tarpaulin --ignore-panics --exclude-files "src/main.rs" --print-summary || {
        echo "⚠️  Coverage check timed out or failed"
        echo "   Continuing with commit (coverage will be checked in CI)"
    }
    
    cd ..
fi

echo "✅ Pre-commit quality gates passed!"