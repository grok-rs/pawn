name: Security Audit

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  cargo-audit:
    name: Cargo Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust-version: [stable]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust-version }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-cargo-audit-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-audit-

      - name: Install cargo-audit
        run: cargo install --force cargo-audit

      - name: Run cargo audit
        working-directory: src-tauri
        run: cargo audit --deny warnings

      - name: Run cargo audit for vulnerabilities
        working-directory: src-tauri
        run: cargo audit --deny unsound --deny yanked

  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run yarn audit
        run: |
          # Run audit and capture output
          if ! yarn audit --level moderate --json > audit-results.json; then
            echo "Yarn audit found issues. Checking if they are fixable..."
            
            # Parse audit results and check for fixable vulnerabilities
            if grep -q '"type":"auditAdvisory"' audit-results.json; then
              echo "Found security vulnerabilities that require manual review."
              cat audit-results.json
              exit 1
            else
              echo "No actionable vulnerabilities found."
            fi
          else
            echo "No security vulnerabilities found in dependencies."
          fi

  dependabot-auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    needs: [cargo-audit, npm-audit]
    
    steps:
      - name: Auto-merge Dependabot PRs
        uses: pascalgn/automerge-action@v0.16.4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          merge_method: squash
          merge_commit_message: "Auto-merge Dependabot PR: {pull_request_title}"

  security-summary:
    name: Security Audit Summary
    runs-on: ubuntu-latest
    needs: [cargo-audit, npm-audit]
    if: always()
    
    steps:
      - name: Security audit summary
        run: |
          echo "## Security Audit Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.cargo-audit.result }}" == "success" ]; then
            echo "| Rust Dependencies | ✅ No vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Rust Dependencies | ❌ Vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.npm-audit.result }}" == "success" ]; then
            echo "| NPM Dependencies | ✅ No vulnerabilities found |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| NPM Dependencies | ❌ Vulnerabilities detected |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Audit completed at:** $(date)" >> $GITHUB_STEP_SUMMARY