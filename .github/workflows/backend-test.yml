name: Backend Quality Gates

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/backend-test.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src-tauri/**'
      - '.github/workflows/backend-test.yml'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          src-tauri/target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libsqlite3-dev pkg-config

    - name: Check Rust formatting
      run: |
        cd src-tauri
        cargo fmt --check

    - name: Run Rust linting
      run: |
        cd src-tauri
        cargo clippy --all-targets --all-features -- -D warnings

    - name: Run Rust type checking
      run: |
        cd src-tauri
        cargo check --all-targets --all-features

    - name: Install cargo-tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Run tests with coverage
      run: |
        cd src-tauri
        cargo tarpaulin --out xml --output-dir ../coverage --exclude-files "src/main.rs" --ignore-panics

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: Check coverage threshold
      run: |
        cd src-tauri
        COVERAGE=$(cargo tarpaulin --print-summary --ignore-panics | grep -oP 'Coverage: \K[0-9.]+' | head -1)
        echo "Coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "❌ Coverage $COVERAGE% is below 90% threshold"
          exit 1
        else
          echo "✅ Coverage $COVERAGE% meets 90% threshold"
        fi

    - name: Run performance benchmarks
      run: |
        cd src-tauri
        # Add performance tests when available
        # cargo bench --bench pairing_performance
        echo "⚡ Performance benchmarks would run here"

    - name: Validate database migrations
      run: |
        cd src-tauri
        # Test migrations can be applied and rolled back
        echo "🗄️ Database migration validation would run here"